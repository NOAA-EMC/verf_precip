#!/bin/bash
#BSUB -J jverf_precip_verfgen24
#BSUB -o /gpfs/dell2/ptmp/Ying.Lin/cron.out/verfgen24.%J
#BSUB -e /gpfs/dell2/ptmp/Ying.Lin/cron.out/verfgen24.%J
#BSUB -n 1
#BSUB -q "dev"
#BSUB -W 0:45
#BSUB -P VERF-T2O
#BSUB -R span[ptile=1]

# why 'BSUB -L /bin/sh' above: this job is bsub'd at the end of GETPPT.
# 'BSUB -L login_shell ensures that variables exported by GETPPT (e.g. vday)
# will not be propagated to the environment of verfgen_24h.  

set -x
module purge
module load ips/18.0.5.274    # for prod_util
module load prod_util/1.1.3
module load prod_envir/1.0.3
module load grib_util/1.1.1

export envir=dev
export cyc=00  # this is to appease setpdy.sh, it looks for /com/date/t${cyc}z.
export vhour=24h
export RUN_ENVIR=dev
export retro=N
export debug=N
export domain=conus
export job=verf_precip_verfgen_24h_${domain}

export version=v4.3.2

# This script has three optional arguments if run interactively.  WCOSS LSF 
# (bsub) does not accept arguments in the LSF script, in that case, set up
# up as environmental variables.  To make this thing more flexible, arg 2 
# and/or 3 can be either 'debug' or 'retro'.  
#   var 1:   vday=yyyymmdd (if var 1 not set, $daym1 is used in J-job)
#   var 2/3: retro (default: no retro)
#   var 3/2: debug (default: no debug.  In debug mode, do not delete the 
#            working directory)

# If this script is run with no arguments, it is assumed that it is
# bsub'd by the cron job (cronmode=Y).  In that case, when the getppt step is
# done, in the dev mode and if bsubnext=Y, jobs/JVERF_PRECIP_VERFGEN_24H will 
# bsub ecf/jverf_precip_plot.ecf and ecf/jverf_precip_fss.ecf.  When this job 
# is run with at least one argument, we'll only be running the VERFGEN24 
# itself.  
export cronmode=Y

if [ $# -ge 1 ]; then
  export vday=$1
  export cronmode=N
fi

if [ $# -ge 2 ]; then
  if [ $2 = retro ]; then
    retro=Y
  elif [ $2 = debug ]; then
    debug=Y
  fi
fi

if [ $# -ge 3 ]; then
  if [ $3 = retro ]; then
    retro=Y
  elif [ $3 = debug ]; then
    debug=Y
  fi
fi

if [ "$RUN_ENVIR" = dev ]; then        ### for dev 
  #export COMCCPA=`compath.py ccpa/prod`/ccpa
  export COMCCPA=/gpfs/dell2/ptmp/Ying.Lin/ccpa/ccpa
# ------------------------------------------------------
# Most frequently made changes: 
  export NOSCRUB=/gpfs/dell2/emc/verification/noscrub/Ying.Lin
  export HOMEverf_precip=/gpfs/dell2/ptmp/$LOGNAME/verf_precip.v4.3.4
  export PARMverf_precip=$HOMEverf_precip/parm
  export DATAverf_precip=/gpfs/dell2/ptmp/$LOGNAME/verf.dat.v4.3.4
  export COMVSDB=$DATAverf_precip/vsdb
  export bsubnext=Y   # bsub PLOT and FSS, if other conditions are met? 
  # Location of the 45-day rotating archive:
  export ARCH45DAY=$NOSCRUB/hold45days
# ------------------------------------------------------
  # DATAROOT is NCO-speak for 'wrkdir'.
  export DATAROOT=/gpfs/dell2/stmp/$LOGNAME/tmpnwprd
#  export vday=20160204 
#  export debug=Y
  # Starting in v3.1.0, we will be using CCPA for 24h ConUS verification 
  # (ST4 as backup, in case CCPA is not available).  To make
  # this version of code usable in pre-implementation parallel runs by YL,
  # make it possible to use ST4 as primary verifying analysis.  In the J-job,
  # VERFANL defaults to 'CCPA', unless specified otherwise in this script.
  export VERFANL=CCPA
else                                   ### for prod/para/test
  export HOMEverf_precip=/gpfs/dell1/nco/ops/nw${envir}/verf_precip.${version}
fi # end of 'is this dev?' 

$HOMEverf_precip/jobs/JVERF_PRECIP_VERFGEN_24H

if [ "$RUN_ENVIR" = dev ]; then  ### for dev only
  if [ $bsubnext = Y -a $cronmode = Y ]; then
    if [ $domain = conus ]; then
      . ~/.bashrc > ~/cron.bashrc.out 2>&1; bsub < $HOMEverf_precip/ecf/dev/jverf_precip_plot.ecf > /gpfs/dell2/ptmp/Ying.Lin/cron.out/cron.conus_plot.out 2>&1
      . ~/.bashrc > ~/cron.bashrc.out 2>&1; bsub < $HOMEverf_precip/ecf/dev/jverf_precip_fss_24h.ecf > /gpfs/dell2/ptmp/Ying.Lin/cron.out/cron.fss24.out 2>&1
    else
      . ~/.bashrc > ~/cron.bashrc.out 2>&1; bsub < $HOMEverf_precip/ecf/dev/jverf_precip_plot.oconus.ecf > /gpfs/dell2/ptmp/Ying.Lin/cron.out/cron.verfplot.oconus.out 2>&1
    fi
  fi
fi

