%comment - ecf user variables
COM = /gpfs/dell1/nco/ops/com
COMPATH: = 
CYC = 00
DBNLOG: = 
E = p
ECF_LOGHOST = gecflow1
ECF_VERSION = 4.7.1
ENVIR = para
EnvVars_ver = 1.0.2
FILESYSTEM:dell1 = dell1
KEEPDATA:NO = YES
MAILTO: = 
PARATEST: = NO
PDY: = 
PROJ = FVS
PROJENVIR = T2O
QUEUE = preprod
SENDDBN:YES = YES
SENDDBN_NTC:YES = YES
prod_envir_ver = 1.0.3
prod_util_ver = 1.1.3
%end - ecf user variables
#BSUB -J pverf_precip_plotpcp_00
#BSUB -o /gpfs/dell1/nco/ops/com/output/para/today/verf_precip_plotpcp_00.o%J
#BSUB -L /bin/sh
#BSUB -q preprod_shared
#BSUB -P FVS-T2O
#BSUB -cwd /tmp
#BSUB -W 01:00
#BSUB -n 1
#BSUB -R rusage[mem=1000] -R affinity[core]

set -xe  # print commands as they are executed and enable signal trapping

export PS4='+ $SECONDS + ' 

# Variables needed for communication with ecFlow
export ECF_NAME=/para00/verf/verf_precip/jverf_precip_plotpcp
#export ECF_HOST=g10z1
export ECF_HOST=gecflow1
export ECF_PORT=31415
export ECF_PASS=KSzIqD3s
export ECF_TRYNO=1
export ECF_RID=$LSB_JOBID

# Tell ecFlow we have started
# POST_OUT variable enables LSF post_exec to communicate with ecFlow
if [ -d /opt/modules ]; then
    # WCOSS TO4 (Cray XC40)
    . /opt/modules/default/init/sh
    module load ecflow
    POST_OUT=/gpfs/hps/tmpfs/ecflow/ecflow_post_in.$LSB_BATCH_JID
elif [ -d /usrx/local/Modules ]; then
    # WCOSS Phase 1 & 2 (IBM iDataPlex)
    . /usrx/local/Modules/default/init/sh
    module load ecflow
    POST_OUT=/var/lsf/ecflow_post_in.$LSB_BATCH_JID
else
    # WCOSS Phase 3 (Dell PowerEdge)
    . /usrx/local/prod/lmod/lmod/init/sh
    module load ips/18.0.1.163 ecflow/4.7.1
    POST_OUT=/var/lsf/ecflow_post_in.$USER.$LSB_BATCH_JID
fi
ecflow_client --init=${ECF_RID}

cat > $POST_OUT <<ENDFILE
ECF_NAME=${ECF_NAME}
ECF_HOST=${ECF_HOST}
ECF_PORT=${ECF_PORT}
ECF_PASS=${ECF_PASS}
ECF_TRYNO=${ECF_TRYNO}
ECF_RID=${ECF_RID}
ENDFILE

# Define error handler
ERROR() {
  set +ex
  if [ "$1" -eq 0 ]; then
     msg="Killed by signal (likely via bkill)"
  else
     msg="Killed by signal $1"
  fi
  ecflow_client --abort="$msg"
  echo $msg
  echo "Trap Caught" >>$POST_OUT
  trap $1; exit $1
}
# Trap all error and exit signals
trap 'ERROR $?' ERR EXIT

# envir-p3.h
export job=${job:-$LSB_JOBNAME} #Can't use $job in filenames!
export jobid=${jobid:-$job.$LSB_JOBID}

export RUN_ENVIR=${RUN_ENVIR:-nco}
export envir=para
export SENDDBN=${SENDDBN:-YES}
export SENDDBN_NTC=${SENDDBN_NTC:-YES}
FILESYSTEMROOT=/gpfs/dell1

module load prod_envir/1.0.3 prod_util/1.1.3 EnvVars/1.0.2

case $envir in
  prod)
    export DATAROOT=${DATAROOT:-${FILESYSTEMROOT}/nco/ops/tmpnwprd}
    if [ "$SENDDBN" == "YES" ]; then
       export DBNROOT=/iodprod_dell/dbnet_siphon
    else
       export DBNROOT=${UTILROOT}/fakedbn
    fi
    ;;
  eval)
    export envir=para
    export DATAROOT=${DATAROOT:-${FILESYSTEMROOT}/nco/ops/tmpnwprd}
    if [ "$SENDDBN" == "YES" ]; then
       export DBNROOT=${UTILROOT}/para_dbn
       SENDDBN_NTC=NO
    else
       export DBNROOT=${UTILROOT}/fakedbn
    fi
    ;;
  para|test)
    export DATAROOT=${DATAROOT:-${FILESYSTEMROOT}/nco/ops/tmpnwprd}
    export DBNROOT=${UTILROOT}/fakedbn
    ;;
  *)
    ecflow_client --abort="ENVIR must be prod, para, eval, or test [envir.h]"
    exit
    ;;
esac

export COMROOT=${FILESYSTEMROOT}/nco/ops/com
export GESROOT=${FILESYSTEMROOT}/nco/ops/nwges
export COREROOT=${FILESYSTEMROOT}/ptmp/production.core/$jobid
export NWROOT=/gpfs/dell1/nco/ops/nw${envir}
export SENDECF=${SENDECF:-YES}
export SENDCOM=${SENDCOM:-YES}
export KEEPDATA=${KEEPDATA:-YES}

if [ -n "NO" ]; then export PARATEST=${PARATEST:-NO}; fi
if [ -n "" ]; then export PDY=${PDY:-}; fi
if [ -n "" ]; then export COMPATH=${COMPATH:-}; fi
if [ -n "" ]; then export MAILTO=${MAILTO:-}; fi
if [ -n "" ]; then export DBNLOG=${DBNLOG:-}; fi

export model=verf_precip
. ${NWROOT:?}/versions/${model:?}.ver
eval export HOME${model}=${NWROOT}/${model}.\${${model}_ver:?}

############################################################
# Load modules
############################################################
module load lsf/$lsf_ver
module load ips/$ips_ver
module load impi/$impi_ver
module load grib_util/$grib_util_ver
module load gempak/${gempak_ver}

module list

export PDY=20200123

export cyc=00
export retro=N
export debug=N
export domain=conus


$HOMEverf_precip/jobs/JVERF_PRECIP_PLOTPCP

ecflow_client --complete  # Notify ecFlow of a normal end
trap 0                    # Remove all traps
exit 0                    # End the shell
%manual
######################################################################
# Purpose: The job and task scripts work together to generate the
#          gempak graphics for the 24h accumulative precip valid at
#          certain model verification time. The plots are used to
#          compare with CPC 1/8 degree analysis chart.
######################################################################
%end